#!/bin/bash

set -xeuo pipefail

# Folder containing the Varnish configuration files
varnish_config_path="/etc/varnish"

# Folder containing the Varnish configuration files templates
varnish_gomplates_path="/etc/varnish/gomplates"

# Output the ASG name for the current instance.
function get_asg_name() {
  aws ec2 describe-instances \
    --instance-ids "$(ec2metadata --instance-id)" \
    --query "Reservations[].Instances[].Tags[?Key=='aws:autoscaling:groupName'].Value" \
    --output text
}

# Outputs the private IP addresses of instances in the same ASG, in a JSON array string.
function get_varnish_node_ips_json() {
  aws ec2 describe-instances \
    --filter "Name=tag:aws:autoscaling:groupName,Values=$(get_asg_name)" \
    --query 'Reservations[].Instances[].PrivateIpAddress' \
    --output json
}

# Output a human-friendly name for the Varnish server.
function get_server_identity() {
  local node_ip
  local node_index

  node_ip=$(hostname -I)
  node_index=$(jq --arg node_ip "$node_ip" 'index($node_ip) + 1' <<< "$varnish_node_ips")

  printf "varnish-node-%02d" "$node_index"
}

# Generate actual Varnish config files from the templates.
function generate_config_files() {
  local varnish_node_ips
  local server_identity

  varnish_node_ips=$(get_varnish_node_ips_json)
  server_identity=$(get_server_identity)

  VARNISH_NODE_IPS=$varnish_node_ips \
  VARNISH_LISTEN_PORT={{ varnish_listen_port }} \
  VARNISH_SERVER_IDENTITY=$server_identity \
  gomplate \
    --input-dir="$varnish_gomplates_path" \
    --output-dir="$varnish_config_path"
}

generate_config_files
varnishreload