
variable "PROJECT_CI" {
  type    = string
  default = "https://github.com/freuds/iac-aws.git"
}

variable "PROJECT_ENV" {
  type    = string
  default = "QA"
}

variable "PROJECT_GIT" {
  type    = string
  default = "https://github.com/freuds/iac-aws.git"
}

variable "PROJECT_NAME" {
  type    = string
  default = "IAC-AWS"
}

variable "PROJECT_OWNER" {
  type    = string
  default = "frederic.willien@revolve.team"
}

variable "aws_profile" {
  type    = string
  default = "revolve"
}

variable "box_base_mac" {
  type    = string
  default = "undefined"
}

variable "box_checksum" {
  type    = string
  default = "undefined"
}

variable "box_folder" {
  type    = string
  default = "undefined"
}

variable "box_name" {
  type    = string
  default = "bento/debian-10"
}

variable "box_version" {
  type    = string
  default = "202105.25.0"
}

variable "instance_type" {
  type    = string
  default = "t3.micro"
}

variable "inventory_groups" {
  type = string
}

variable "playbook_file" {
  type = string
}

variable "region" {
  type    = string
  default = "eu-west-1"
}

variable "role" {
  type = string
}

variable "security_group_id" {
  type    = string
  default = "sg-0cedabc8df636164f"
}

variable "service" {
  type = string
}

variable "shared_account" {
  type    = string
  default = "205168111441,432161212492"
}

variable "source_ami" {
  type    = string
  default = "ami-0964eb2dc8b836eb6"
}

variable "subnet_id" {
  type    = string
  default = "subnet-0d969f189aad02f1a"
}

variable "vagrant_ssh_private_key" {
  type    = string
  default = "undefined"
}

variable "vpc_id" {
  type    = string
  default = "vpc-0943350383762ea0c"
}
# The "legacy_isotime" function has been provided for backwards compatability, but we recommend switching to the timestamp and formatdate functions.

source "amazon-ebs" "autogenerated_1" {
  ami_description             = "ubuntu-${var.service}-${var.role}"
  ami_name                    = "${var.service}-${var.role}-${legacy_isotime("2006-01-02T15-04-05")}"
  ami_regions                 = ["eu-west-1"]
  ami_users                   = "${var.shared_account}"
  associate_public_ip_address = true
  instance_type               = "${var.instance_type}"
  region                      = "${var.region}"
  run_tags = {
    Appli = "${var.PROJECT_NAME}"
    Env   = "${var.PROJECT_ENV}"
    Name  = "Packer Builder ${var.service}"
    ci    = "${var.PROJECT_CI}"
    git   = "${var.PROJECT_GIT}"
    owner = "${var.PROJECT_OWNER}"
  }
  security_group_id = "${var.security_group_id}"
  source_ami        = "${var.source_ami}"
  ssh_pty           = true
  ssh_username      = "ubuntu"
  subnet_id         = "${var.subnet_id}"
  tags = {
    Appli        = "${var.PROJECT_NAME}"
    Env          = "${var.PROJECT_ENV}"
    Name         = "${var.service}-${var.role}"
    Role         = "${var.role}"
    Service      = "${var.service}"
    "Source AMI" = "${var.source_ami}"
    ci           = "${var.PROJECT_CI}"
    git          = "${var.PROJECT_GIT}"
    owner        = "${var.PROJECT_OWNER}"
  }
  vpc_id = "${var.vpc_id}"
}

source "qemu" "autogenerated_2" {
  accelerator      = "kvm"
  boot_command     = ["<tab> text ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter><wait>"]
  boot_wait        = "10s"
  disk_interface   = "virtio"
  disk_size        = "5000M"
  format           = "qcow2"
  http_directory   = "path/to/httpdir"
  iso_checksum     = "md5:af4a1640c0c6f348c6c41f1ea9e192a2"
  iso_url          = "http://mirror.raystedman.net/centos/6/isos/x86_64/CentOS-6.9-x86_64-minimal.iso"
  net_device       = "virtio-net"
  output_directory = "output_centos_tdhtest"
  shutdown_command = "echo 'packer' | sudo -S shutdown -P now"
  ssh_password     = "s0m3password"
  ssh_timeout      = "20m"
  ssh_username     = "root"
  vm_name          = "tdhtest"
}

source "virtualbox-ovf" "autogenerated_3" {
  checksum             = "${var.box_checksum}"
  communicator         = "ssh"
  guest_additions_mode = "disable"
  headless             = true
  output_directory     = "/tmp/packer_output"
  shutdown_command     = "sudo shutdown -P now"
  skip_export          = true
  source_path          = "${var.box_folder}/box.ovf"
  ssh_port             = "62222"
  ssh_private_key_file = "~/.vagrant.d/insecure_private_key"
  ssh_pty              = true
  ssh_skip_nat_mapping = true
  ssh_username         = "vagrant"
  ssh_wait_timeout     = "1000s"
  target_path          = "/tmp/packer_cache"
  vboxmanage           = [["modifyvm", "{{ .Name }}", "--cpus", "2"], ["modifyvm", "{{ .Name }}", "--memory", "2048"], ["modifyvm", "{{ .Name }}", "--nic1", "nat"], ["modifyvm", "{{ .Name }}", "--natpf1", "packerssh,tcp,127.0.0.1,62222,,22"], ["modifyvm", "{{ .Name }}", "--uart1", "0x3F8", "4"], ["modifyvm", "{{ .Name }}", "--macaddress1", "${var.box_base_mac}"], ["modifyvm", "{{ .Name }}", "--accelerate3d", "off"], ["modifyvm", "{{ .Name }}", "--graphicscontroller", "vmsvga"], ["modifyvm", "{{ .Name }}", "--pae", "off"], ["modifyvm", "{{ .Name }}", "--nestedpaging", "on"], ["modifyvm", "{{ .Name }}", "--vram", "128"]]
}

build {
  sources = ["source.amazon-ebs.autogenerated_1", "source.qemu.autogenerated_2", "source.virtualbox-ovf.autogenerated_3"]

  provisioner "shell" {
    inline = ["sleep 20"]
    only   = ["amazon-ebs"]
  }

  provisioner "shell" {
    scripts = ["${path.root}/../scripts/bootstrap.sh"]
  }

  provisioner "ansible-local" {
    extra_arguments  = ["--extra-vars \"SERVICE=${var.service}\"", "-e ansible_python_interpreter=/usr/bin/python3"]
    group_vars       = "${path.root}/../../ansible/playbooks/group_vars"
    inventory_groups = "${var.inventory_groups}"
    playbook_dir     = "${path.root}/../../ansible"
    playbook_file    = "${var.playbook_file}"
  }

  provisioner "shell" {
    scripts = ["${path.root}/../scripts/cleanup.sh"]
  }

}
