#!/usr/bin/env python3

# More info about dehydrated: https://github.com/lukas2511/dehydrated/wiki/Examples-for-DNS-01-hooks

# modules declaration
import sys
import boto3
from time import sleep
from time import strftime

# declaring variables
hosted_zone_id = '{{ dehydrated_hook_config.dns_route53.hosted_zone_id }}'
vault_bucket = '{{ dehydrated_hook_config.dns_route53.vault_bucket }}'

def setup_dns(domain, txt_challenge):
    global hosted_zone_id

    session = boto3.Session()
    client = session.client("route53")

    resp = client.change_resource_record_sets(
        HostedZoneId=hosted_zone_id,
        ChangeBatch={
            'Changes': [{
                'Action': 'UPSERT',
                'ResourceRecordSet': {
                    'Name': '_acme-challenge.{0}'.format(domain),
                    'Type': 'TXT',
                    'TTL': 60,
                    'ResourceRecords': [{
                        'Value': '"{0}"'.format(txt_challenge)
                    }]
                }
            }]
        }
    )

    # wait 30 seconds for DNS update
    sleep(30)

def delete_dns(domain, txt_challenge):
    global hosted_zone_id

    session = boto3.Session()
    client = session.client("route53")

    resp = client.change_resource_record_sets(
        HostedZoneId=hosted_zone_id,
        ChangeBatch={
            'Changes': [{
                'Action': 'DELETE',
                'ResourceRecordSet': {
                    'Name': '_acme-challenge.{0}'.format(domain),
                    'Type': 'TXT',
                    'TTL': 60,
                    'ResourceRecords': [{
                        'Value': '"{0}"'.format(txt_challenge)
                    }]
                }
            }]
        }
    )

def deploy_cert(domain, cert_private_key, cert_body, cert_chain):
    global vault_bucket

    s3 = boto3.resource("s3")

    s3.meta.client.upload_file(cert_private_key, vault_bucket, 'letsencrypt/{0}/privkey.pem'.format(domain), ExtraArgs={'ContentType': 'text/plain'})
    s3.meta.client.upload_file(cert_body, vault_bucket, 'letsencrypt/{0}/cert.pem'.format(domain), ExtraArgs={'ContentType': 'text/plain'})
    s3.meta.client.upload_file(cert_chain, vault_bucket, 'letsencrypt/{0}/fullchain.pem'.format(domain), ExtraArgs={'ContentType': 'text/plain'})
    cert_chain = cert_chain.replace('fullchain.pem','chain.pem')
    s3.meta.client.upload_file(cert_chain, vault_bucket, 'letsencrypt/{0}/chain.pem'.format(domain), ExtraArgs={'ContentType': 'text/plain'})

def log(msg):
    print('==> dns_route53: {}'.format(msg))

if __name__ == "__main__":
    hook = sys.argv[1]
    print("++==> Start time : " + strftime("%c"))
    log(hook)

    if hook == "deploy_challenge":
        domain = sys.argv[2]
        txt_challenge = sys.argv[4]
        log(domain)
        log(txt_challenge)
        setup_dns(domain, txt_challenge)

    elif hook == "clean_challenge":
        domain = sys.argv[2]
        txt_challenge = sys.argv[4]
        log(domain)
        log(txt_challenge)
        delete_dns(domain, txt_challenge)

    elif hook == "deploy_cert":
        domain = sys.argv[2]
        cert_private_key = sys.argv[3]
        cert_body = sys.argv[4]
        cert_chain = sys.argv[5]
        log(cert_private_key)
        log(cert_body)
        log(cert_chain)
        deploy_cert(domain, cert_private_key, cert_body, cert_chain)
