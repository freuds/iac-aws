#jinja2: lstrip_blocks: True
# Varnish defaut VCL
# {{ ansible_managed }}
{% if varnish_version is version_compare('4.0', '>=') %}
vcl 4.0;
{% endif %}

import std;
import directors;
import dynamic;

{% if varnish_cluster is defined %}
include "include.nodes.vcl";
{% endif %}

{% if varnish_backends is defined %}
# Other backend servers.
{% for backend, value in varnish_backends.items() | list %}
backend {{ backend }} {
  .host = "{{ value.host }}";
  .port = "{{ value.port }}";
}
{% endfor %}
{% endif %}

{% if varnish_cluster is defined %}
# Define the Varnish Cluster
sub vcl_init {
    # Add Dynamic DNS VMOD
    include "include.dynamic_dns.vcl";

    # Create Sharded Cluster
    new cluster = directors.shard();
    include "include.nodes_init.vcl";

    {% if varnish_backends is defined %}
    # Add other backend servers.
    {% for backend, value in varnish_backends.items() | list %}
    cluster.add_backend(ddir.backend("{{ backend }}"));
    {% endfor %}
    {% endif %}

    cluster.reconfigure();
}
{% endif %}

# Handle x-cache = "hit"
sub vcl_hit {
    # Set x-cache to indicate we are delivering from cache
    set req.http.x-cache = "hit";
}

# Handle x-cache = "miss"
sub vcl_miss {
    # The object comes from the backend after failing to find it in the cache
    set req.http.x-cache = "miss";
}

# Handle x-cache = "pass"
sub vcl_pass {
    # the object comes from the backend because the request bypassed the cache
    set req.http.x-cache = "pass";
}

# Handle x-cache = "synth"
sub vcl_synth {
    # we created a synthetic object on-the-fly to satisfy the request
    set resp.http.x-cache = "synth synth";
}

# Handle x-cache = "pipe uncacheable"
sub vcl_pipe {
    set req.http.x-cache = "pipe uncacheable";
}

sub vcl_deliver {
    # Handle CORS configuration
    set resp.http.Access-Control-Allow-Origin = "{{ varnish_cors_access_control_allow_origin | default ('*') }}";
    set resp.http.Access-Control-Allow-Credentials = "{{ varnish_cors_access_control_allow_credentials | default ('true') }}";

    # Handle CORS Preflight request
    if (req.method == "OPTIONS"){
        set resp.http.Access-Control-Max-Age = "{{ varnish_cors_access_control_max_age | default('1728000') }}";
        set resp.http.Access-Control-Allow-Methods = "{{ varnish_cors_access_control_allow_methods | default('GET, POST, PUT, DELETE, PATCH, OPTIONS') }}";
        set resp.http.Access-Control-Allow-Headers = "{{ varnish_cors_access_control_allow_methods | default('*') }}";
        set resp.http.Content-Length = "0";
        set resp.http.Content-Type = "text/plain charset-UTF-8";
        set resp.status = 204;
    }

    # Handle object uncacheable / cacheable
    if (obj.uncacheable) {
        set req.http.x-cache =  req.http.x-cache + " uncacheable";
    } else {
        set req.http.x-cache =  req.http.x-cache + " cacheable";
    }

    # Comment the following line to hide the x-cache header in response
    set resp.http.x-cache = req.http.x-cache;
}

sub vcl_recv {
{% if varnish_cluster is defined %}
    # Select cache backend in director
    set req.backend_hint = cluster.backend();
    set req.http.X-shard = req.backend_hint;

    # Set probe URI
    if (req.method == "GET" && req.url ~ "/healthz") {
        return(synth(200, "OK")); 
    }

    {% if varnish_vhosts is defined %}
    # Varnish vhosts.
        {% for vhost, value in varnish_vhosts.items() | list if varnish_vhosts is defined %}
        {% if loop.first %}
    if (req.http.x-shard == "{{ '{{ (getenv "VARNISH_SERVER_IDENTITY") }}' }}" && (req.http.host == "{{ vhost }}" || req.http.host == "www.{{ vhost }}")) {
        {% else %}
    elseif (req.http.x-shard == "{{ '{{ (getenv "VARNISH_SERVER_IDENTITY") }}' }}" && (req.http.host == "{{ vhost }}" || req.http.host == "www.{{ vhost }}")) {
        {% endif %}
        set req.backend_hint = ddir.backend("{{ value.backend }}");
    }
        {% endfor %}
    elseif (req.http.x-shard == "{{ '{{ (getenv "VARNISH_SERVER_IDENTITY") }}' }}") {
        set req.backend_hint = ddir.backend("{{ varnish_default_content_backend_host }}");
    {% else %}
    # Send request directly to backend when:
    # - Backend selected in shard director is unhealthy (x-shard empty)
    # - Backend selected in shard director is current varnish server (avoid infinite loops)
    # - Request is neither GET, nor HEAD
    if (req.http.x-shard == "" ||
        req.http.x-shard == "{{ '{{ (getenv "VARNISH_SERVER_IDENTITY") }}' }}" ||
        (req.method != "GET" && req.method != "HEAD")) {
        set req.backend_hint = ddir.backend("{{ varnish_default_content_backend_host }}");
    {% endif %}
    } else {
        # If pass is returned, cache will NOT be replicated amongst all varnish servers (sharding)
        # If hash is returner, cached will be replicated amongst all varnish servers (same cache in all varnish servers)
        return({{ 'hash' if varnish_sharding else 'pass' }});
    }
    # Set X-Shard header again as it might have changed in above conditions
    set req.http.x-shard = req.backend_hint;

    # Exclude PUT / POST / DELETE
    if (req.method == "PUT" || req.method == "POST" || req.method == "DELETE") {
        return (pass);
    }

    {% if varnish_domain_excludes is defined %}
    # Handle full domain excludes
        {% for excluded_domain in varnish_domain_excludes %}
    # Exclude domain {{ excluded_domain }} from cache
    if (req.http.host == "{{ excluded_domain }}") {
        return(pass);
    }
        {% endfor %}
    {% endif %}

    # If it passes all these tests, do a lookup anyway
    return(hash);
{% else %}
    set req.backend_hint = ddir.backend("varnish_default_content_backend_host")
    {% if varnish_vhosts is defined %}
    # Varnish vhosts.
        {% for vhost, value in varnish_vhosts.items() | list if varnish_vhosts is defined %}
        {% if loop.first %}
    if (req.http.host == "{{ vhost }}" || req.http.host == "www.{{ vhost }}") {
        {% else %}
    elseif (req.http.host == "{{ vhost }}" || req.http.host == "www.{{ vhost }}") {
        {% endif %}
        set req.backend_hint = ddir.backend("{{ value.backend }}");
    } else {
        return(pass);
    }
    return(hash);
        {% endfor %}
    {% endif %}
{% endif %}
}